                            1. Метод capitilize
 Дефект №1:
Метод: capitilize

 Описание: Ошибка в названии метода. Название capitilize содержит опечатку, правильное
название должно быть capitalize.

 Фактический результат: Метод вызывается как capitilize, что может привести к путанице
при использовании и затрудняет поиск стандартной функции capitalize.

Рекомендация: Переименовать метод на capitalize для улучшения читаемости и соответствия
стандартной терминологии.


 Дефект №2:
Метод: capitilize

 Описание: Метод не обрабатывает None в качестве аргумента, что приводит к выбросу
AttributeError.

 Фактический результат: При вызове capitilize(None) метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен корректно обрабатывать None и возвращать пустую строку
("") или None, если это допустимо.

Рекомендация: Добавить проверку на None в начале метода.


 Дефект №3:
Метод: capitilize

 Описание: Метод capitilize не удаляет начальные пробелы перед тем, как преобразовать
первый символ в заглавный.

 Фактический результат: При вызове capitilize(" тест") метод возвращает " тест",
а не " Тест".

 Ожидаемый результат: Возможно, ожидалось, что метод будет преобразовывать первую
букву после всех начальных пробелов, возвращая строку с заглавной буквой.

Рекомендация: Уточнить поведение метода в документации или дополнительно обработать
начальные пробелы, чтобы сделать первую букву заглавной даже при их наличии,
если это требуется.


                            2. Метод trim
 Дефект №4:
Метод: trim

 Описание: Метод trim удаляет пробелы только в начале строки, но в спецификации не
указано, как метод должен вести себя с пробелами в конце строки. Пользователь может
ожидать, что пробелы будут удалены как в начале, так и в конце строки
(обычное поведение для методов обрезки в других библиотеках).

 Фактический результат: trim(" skypro ") возвращает "skypro ".

 Ожидаемый результат: Если предполагается удаление пробелов с обеих сторон, результат
должен быть "skypro".

Рекомендация: Рассмотреть возможность использования string.strip() вместо removeprefix()
для более интуитивного поведения (удаление пробелов с начала и конца).


 Дефект №5:
Метод: trim

 Описание: Метод не обрабатывает None в качестве аргумента, что приводит к выбросу
AttributeError.

 Фактический результат: При вызове trim(None) метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен корректно обрабатывать None и возвращать пустую
строку ("") или None, если это допустимо.

Рекомендация: Добавить проверку на None в начале метода.


 Дефект №6:
Метод: trim

 Описание: Метод работает только с пробелами в начале строки и не учитывает другие
пробельные символы (например, табуляцию \t, перенос строки \n и другие).

 Фактический результат: trim("\t\n skypro") возвращает "\t\n skypro".

 Ожидаемый результат: Пользователи могут ожидать, что метод удалит все начальные
пробельные символы, включая табуляцию и перенос строки.

Рекомендация: Использовать string.lstrip() вместо removeprefix(" "), чтобы удалить
любые пробельные символы в начале строки.


                              3. Метод to_list
 Дефект №7:
Метод: to_list

 Описание: Метод не обрабатывает None как входное значение для аргумента string,
что приводит к выбросу AttributeError.

 Фактический результат: При вызове to_list(None, ",") метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен корректно обрабатывать None и возвращать пустой
список [] при отсутствии значений для разбиения.

Рекомендация: Добавить проверку на None в начале метода.


 Дефект №8:
Метод: to_list

 Описание: Неправильное название параметра delimeter. Корректное название — delimiter.

 Фактический результат: В коде используется параметр с названием delimeter, что содержит
опечатку.

 Ожидаемый результат: Использование правильного названия delimiter, что улучшит читаемость
и предотвратит путаницу.

Рекомендация: Переименовать параметр на delimiter и убедиться, что это исправление отражено
везде, где используется данный параметр.


 Дефект №9:
Метод: to_list

 Описание: Метод to_list возвращает пустую строку как элемент списка, если строка содержит
двойной разделитель (например, "a,,b"). Хотя в некоторых случаях это может быть допустимым
поведением, это поведение не указано в документации и может быть нежелательным.

 Фактический результат: При вызове to_list("a,,b", ",") метод возвращает ["a", "", "b"].

 Ожидаемый результат: Уточнить поведение метода в документации или обновить его, чтобы
исключить пустые элементы, если это соответствует ожидаемому результату.

Рекомендация: Добавить в документацию информацию о том, как метод обрабатывает двойные
разделители, или добавить фильтрацию пустых элементов, если это предпочтительное поведение.


 Дефект №10:
Метод: to_list

 Описание: Метод не обрабатывает корректно ситуации, когда разделитель не присутствует
в строке, что приводит к возврату всей строки как единственного элемента в списке.
Хотя это может быть правильным результатом, документация не описывает это поведение,
что может привести к недопониманию.

 Фактический результат: При вызове to_list("abc", "x") метод возвращает ["abc"],
так как разделителя нет в строке.

 Ожидаемый результат: Документация должна указывать, что при отсутствии разделителя
в строке метод возвращает всю строку как единственный элемент списка.

Рекомендация: Уточнить документацию, чтобы явно указать это поведение.


                             4. Метод contains
 Дефект №11:
Метод: contains

 Описание: Метод не обрабатывает случай, когда в качестве входного значения передается
None вместо строки. Это приводит к выбросу исключения AttributeError при вызове метода.

 Фактический результат: При вызове contains(None, "T") метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен возвращать False, если входной параметр string равен None.

Рекомендация: Добавить проверку на None в начале метода.


                              5. Метод delete_symbol
 Дефект №12:
Метод: delete_symbol
 Описание: Метод не обрабатывает случай, когда входной параметр string равен None.
Это приводит к выбросу исключения AttributeError при вызове методов replace или contains.

 Фактический результат: При вызове delete_symbol(None, "a") метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен возвращать None или пустую строку,если входная
строка равна None.

Рекомендация: Добавить проверку на None в начале метода


                              6. Метод starts_with
 Дефект №13:
Метод: starts_with

 Описание: Метод не обрабатывает случай, когда входной параметр string равен
None. Это приводит к выбросу исключения AttributeError при вызове метода startswith.

 Фактический результат: При вызове starts_with(None, "S")
метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен возвращать False или выбрасывать понятное
исключение при попытке вызвать метод с None в качестве строки.

Рекомендация: Добавить проверку на None в начале метода


                              7. Метод end_with
 Дефект №14:
Метод: end_with

 Описание: Метод не обрабатывает случай, когда входной параметр string равен None.
Это приводит к выбросу исключения AttributeError при вызове метода endswith.

 Фактический результат: При вызове end_with(None, "o")
метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен возвращать False или выбрасывать понятное
исключение при попытке вызвать метод с None в качестве строки.

Рекомендация: Добавить проверку на None в начале метода


                              8. Метод is_empty
 Дефект №15:
Метод: is_empty

 Описание: Метод не обрабатывает случай, когда входной параметр string равен None.
Это приводит к выбросу исключения AttributeError при вызове метода trim.

 Фактический результат: При вызове is_empty(None)
метод выбрасывает AttributeError.

 Ожидаемый результат: Метод должен корректно обрабатывать None, возвращая True
(считая None пустым) или False в зависимости от требований. Альтернативно,
метод может выбрасывать понятное исключение с объяснением проблемы.

Рекомендация: Добавить проверку на None в начале метода.


 Дефект №16:
Метод: is_empty

 Описание: Метод trim удаляет только начальные пробелы, не учитывая пробелы
в конце строки или другие пробельные символы (например, табуляции, переносы строк).
Это может привести к неправильной оценке строки как пустой или непустой.

 Фактический результат: Строки с пробелами только в начале или с другими
пробельными символами (например, \t, \n) могут не обрабатываться как ожидается.

 Ожидаемый результат: Метод должен удалять все пробельные символы (начальные и конечные)
для точной оценки, является ли строка пустой.

Рекомендация: Использовать метод strip() вместо trim, чтобы удалить пробелы с обеих
сторон и учесть все пробельные символы


                              9. Метод list_to_string
 Дефект №17:
Метод: list_to_string

 Описание: Документация метода не упоминает поведение для списка с элементами типа None
или других нестандартных объектов.

 Фактический результат: Пользователь может ожидать, что такие элементы будут пропущены или
вызовут исключение, но они преобразуются в строку 'None'.

 Ожидаемый результат: Документация должна четко описывать, что метод преобразует None и
другие нестандартные объекты в строки.

Рекомендация: Обновить документацию для уточнения поведения метода с нестандартными
типами данных.